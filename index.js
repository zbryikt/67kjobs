// Generated by LiveScript 1.2.0
var x$;
x$ = angular.module('jobs', ['firebase']);
x$.filter('tok', function(){
  return function(it){
    if (isNaN(it)) {
      return it;
    }
    return parseInt(it / 1000) + "K";
  };
});
x$.directive('delayBk', function(){
  return {
    restrict: 'A',
    link: function(scope, e, attrs, ctrl){
      var url;
      url = attrs["delayBk"];
      return $('<img/>').attr('src', url).load(function(){
        $(this).remove();
        e.css({
          "backgroundImage": "url(" + url + ")"
        });
        return e.toggleClass('visible');
      });
    }
  };
});
x$.controller('index', function($scope, $timeout, $firebase){
  var update;
  $scope.jobtypes = jobtypes;
  $scope.needfix = false;
  $scope.newjob = {};
  if (false) {
    $scope.newjob = {
      title: '碩士級以上研究助理',
      jobtype: $scope.jobtypes[2],
      jobname: $scope.jobtypes[2].jobs[3],
      salary1: 67000,
      salary2: 68000,
      location: '台北市',
      company: '中央研究院',
      url: 'http://www.sinica.edu.tw',
      email: 'hr@nowhere.no',
      desc: '研究助理，協助研究員進行研究，處理文件，申請補助計劃，論文編撰。'
    };
  }
  $scope.user = null;
  $scope.jobtype = "";
  $scope.jobs = [];
  update = function(data){
    var ret, item;
    ret = [];
    for (item in data) {
      if (item.indexOf("$") !== 0) {
        ret.push([item, data[item]]);
      }
    }
    return ret;
  };
  $scope.$watch('newjob.jobtype', function(v){
    if ($scope.newjob.jobtype) {
      $scope.jobs = $scope.newjob.jobtype.jobs;
      return console.log($scope.newjob.jobtype.jobs);
    }
  });
  $scope.dbRef = {};
  $scope.datasrc = {
    get: function(arg$){
      var id, ref$, name, this$ = this;
      id = (ref$ = arg$.id) != null ? ref$ : 0, name = (ref$ = arg$.name) != null ? ref$ : "all";
      if (!this[name]) {
        if (!$scope.dbRef[name]) {
          $scope.dbRef[name] = new Firebase("https://joblist.firebaseio.com/cat" + id);
        }
        this[name] = $firebase($scope.dbRef[name]);
      }
      this[name].$on('loaded', function(v){
        return $scope.$apply(function(){
          return $scope.data[id] = update(v).slice().reverse();
        });
      });
      this[name].$on('change', function(v){
        if (v && $scope.data[id] !== undefined) {
          return $scope.$apply(function(){
            return $scope.data[id] = [[v, this$[name][v]]].concat($scope.data[id]);
          });
        }
      });
      return this[name];
    }
  };
  $scope.datasrc.get({
    id: 0,
    name: "all"
  });
  $scope.data = {};
  $scope.auth = new FirebaseSimpleLogin($scope.dbRef.all, function(e, u){
    return $scope.$apply(function(){
      return $scope.user = u;
    });
  });
  $scope.login = function(){
    return $scope.auth.login('facebook');
  };
  $scope.logout = function(){
    return $scope.auth.logout();
  };
  $scope.$watch('jobtab', function(){
    var src;
    if ($scope.jobtab) {
      return src = $scope.datasrc.get($scope.jobtab);
    }
  });
  $scope.curjob = {};
  $scope.detail = function(j){
    $scope.curjob = j;
    return setTimeout(function(){
      return $('#job-detail-modal').modal("show");
    }, 0);
  };
  $scope.remove = function(job){
    var src;
    console.log("removing...");
    src = $scope.datasrc.get($scope.jobtab
      ? $scope.jobtab
      : {
        id: 0,
        name: "all"
      });
    return src.$remove(job[0]);
  };
  $scope.submit = function(){
    var check, t1, t2, now, ref1, ref2;
    check = ['jobname', 'salary2', 'salary1', 'company', 'email', 'jobtype', 'location', 'title'];
    t1 = $scope.newjobform.salary1;
    t2 = $scope.newjobform.salary2;
    t1.$setValidity('salary1', $scope.newjob.salary1 < 67000 ? false : true);
    t2.$setValidity('salary2', isNaN($scope.newjob.salary2) || $scope.newjob.salary2 < $scope.newjob.salary1 ? false : true);
    if (!$scope.user) {
      return;
    }
    if (check.map(function(it){
      return $scope.newjobform[it].$invalid;
    }).filter(function(it){
      return it;
    }).length) {
      console.error("submit job failed");
      $scope.needfix = true;
      return;
    }
    now = new Date().getTime();
    $scope.newjob.owner = {
      id: $scope.user.id,
      name: $scope.user.displayName
    };
    $scope.newjob.time = now;
    ref1 = $scope.datasrc.all.$add($scope.newjob);
    ref2 = $scope.datasrc.get($scope.newjob.jobtype).$add($scope.newjob);
    $scope.newjob = {};
    $scope.needfix = false;
    console.log("job added");
    $scope.waitreload = true;
    return $timeout(function(){
      return $scope.waitreload = false;
    }, 1000);
  };
  $scope.msg = {
    db: {
      all: {
        ref: {},
        data: {}
      },
      msg: {
        ref: {},
        data: {}
      },
      mtd: {
        ref: {},
        data: {}
      },
      mta: {
        ref: {},
        data: {}
      }
    },
    newmsg: 0,
    getnewmsg: function(){
      var k, ref$, v, results$ = [];
      this.newmsg = 0;
      for (k in ref$ = this.db.all.data) {
        v = ref$[k];
        results$.push(this.newmsg += v.newmsg);
      }
      return results$;
    },
    init: function(){
      var this$ = this;
      this.db.all.ref = $firebase(new Firebase("https://joblist.firebaseio.com/msgmeta/" + $scope.user.id + "/"));
      this.db.all.ref.$on('loaded', function(v){
        this$.db.all.data = v || {};
        return this$.getnewmsg();
      });
      return this.db.all.ref.$on('change', function(v){
        if (v) {
          this$.db.all.data[v] = this$.db.all.ref[v];
          return this$.getnewmsg();
        }
      });
    },
    key: null,
    get: function(atk, def){
      var ref$, a, b, key, this$ = this;
      ref$ = atk.id < def.id
        ? [atk, def]
        : [def, atk], a = ref$[0], b = ref$[1];
      key = a.id + "+" + b.id;
      this.db.msg.ref[key] = $firebase(new Firebase("https://joblist.firebaseio.com/msg/" + a.id + "/" + b.id + "/"));
      this.db.mtd.ref[key] = $firebase(new Firebase("https://joblist.firebaseio.com/msgmeta/" + def.id + "/" + atk.id + "/"));
      this.db.mta.ref[key] = $firebase(new Firebase("https://joblist.firebaseio.com/msgmeta/" + atk.id + "/" + def.id + "/"));
      this.db.mtd.ref[key].$on('loaded', function(v){
        return this$.db.mtd.data[key] = v;
      });
      this.db.mta.ref[key].$on('loaded', function(v){
        return this$.db.mta.data[key] = v;
      });
      this.db.msg.ref[key].$on('loaded', function(v){
        return this$.db.msg.data[key] = update(v).slice().reverse();
      });
      this.db.msg.ref[key].$on('change', function(v){
        var ref$;
        if (!((ref$ = this$.db.msg.data)[key] || (ref$[key] = [])).filter(function(it){
          return it[0] === v;
        }).length) {
          return this$.db.msg.data[key] = [[v, this$.db.msg.ref[key][v]]].concat(this$.db.msg.data[key]);
        }
      });
      return key;
    },
    send: function(){
      var key, payload, ref$;
      if (!this.content) {
        return;
      }
      key = this.get(this.atk, this.def);
      payload = {
        msg: this.content,
        time: new Date().getTime(),
        author: this.atk.id
      };
      this.db.msg.ref[key].$add(payload);
      this.db.mtd.ref[key].$update(import$(this.db.mtd.data[key] || {}, {
        newmsg: (((ref$ = this.db.mtd.data)[key] || (ref$[key] = {})).newmsg || 0) + 1,
        user: {
          displayName: this.atk.displayName,
          id: this.atk.id
        }
      }));
      this.db.mta.ref[key].$update(import$(this.db.mta.data[key] || {}, {
        newmsg: 0,
        user: {
          displayName: this.def.displayName,
          id: this.def.id
        }
      }));
      this.getnewmsg();
      this.content = "";
      return console.log("message sent.");
    },
    show: function(atk, def){
      var ref$;
      if (!(atk && def)) {
        return;
      }
      ref$ = $scope.msg;
      ref$.atk = atk;
      ref$.def = def;
      this.key = $scope.msg.get(atk, def);
      this.db.mta.ref[this.key].$update(import$(this.db.mta.data[this.key] || {}, {
        newmsg: 0,
        user: {
          displayName: this.def.displayName,
          id: this.def.id
        }
      }));
      this.getnewmsg();
      return setTimeout(function(){
        return $('#msg-modal').modal("show");
      }, 0);
    }
  };
  $('#msg-modal').on('hide.bs.modal', function(){
    var m, key;
    m = $scope.msg;
    if (!(m.atk && m.def)) {
      return;
    }
    key = m.get(m.atk, m.def);
    m.db.mta.ref[key].$update(import$(m.db.mta.data[key] || {}, {
      newmsg: 0,
      user: {
        displayName: m.def.displayName,
        id: m.def.id
      }
    }));
    return m.getnewmsg();
  });
  return $scope.$watch('user', function(it){
    if (it) {
      return $scope.msg.init();
    }
  });
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}